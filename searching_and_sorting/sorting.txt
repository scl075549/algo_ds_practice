Intro to sorting:

The naive approach --> comparing every element to every element

In-place sorting: rearranges all of the elements to be sorted in the data structure they are already in w/o having to copy them over to a new data structure (low space-complexity)

Bubble sort (or Sinking sort) (naive):
Go through array comparing elements side by side, and switching them when necessary.

ex.
[8, 3, 1, 7, 0] --> 8 > 3
[3, 8, 1, 7, 0] --> 8 > 1
[3, 1, 8, 7, 0] --> 8 > 7
[3, 1, 7, 8, 0] --> 8 > 0
[3, 1, 7, 0, 8] --> 3 > 1
[1, 3, 7, 0, 8] --> 7 > 0
[1, 3, 0, 7, 8] --> 3 > 0
[1, 0, 3, 7, 8] --> 1 > 0
[0, 1, 3, 7, 8] --> SORTED

Efficiency of Bubble sort: O(n^2)
Space-complexity of Bubble sort: O(1) --> In-place sorting


Merge Sort:
Split array down, sort it, and build it back up --> "Divide and Conquer"
[8, 3, 1, 7, 0, 10, 2]
[8][3, 1][7, 0][10, 2]
[8][1, 3][0, 7][2, 10] # 3 comparisons
[1, 3, 8][0, 2, 7, 10] # 5 ""
[0, 1, 2, 3, 7, 8, 10] # 6 ""

Efficiency of Merge Sort: O(n log(n))
    We are doing n comparisons for log(n) number of steps
